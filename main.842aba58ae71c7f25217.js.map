{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","resolve","map","user","arr","table","makeTransaction","transaction","reject","randomIntegerFromInterval","Math","random","id","min","max","floor","logSuccess","logError","warn","amount","catch"],"mappings":"iJAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAASF,KACRA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAc,GAIjBA,EAHYF,EAASG,KAAI,SAAAC,GAAI,OAC3BA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,UAM7Db,EAAS,SAAAc,GAAG,OAAIZ,QAAQa,MAAMD,IAEpCN,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAAMgB,EAAkB,SAAAC,GACtB,OAAO,IAAIpB,SAAQ,SAACc,EAASO,GAC3B,IAAMvB,EAAQwB,EAA0B,IAAK,KAC7CpB,YAAW,WACUqB,KAAKC,SAAW,GAGjCV,EAAQ,CAACM,EAAYK,GAAI3B,IAEzBuB,EAAOD,EAAYK,MAEpB3B,OAIDwB,EAA4B,SAACI,EAAKC,GACtC,OAAOJ,KAAKK,MAAML,KAAKC,UAAYG,EAAMD,EAAM,GAAKA,IAGhDG,EAAa,SAAAZ,GACjBZ,QAAQC,IAAR,eAA2BW,EAAI,GAA/B,iBAAkDA,EAAI,GAAtD,QAGIa,EAAW,SAAAL,GACfpB,QAAQ0B,KAAR,gCAA6CN,EAA7C,8BAaFN,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAEhEX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAE/DX,EAAgB,CAAEM,GAAI,GAAIO,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,G","file":"main.842aba58ae71c7f25217.js","sourcesContent":["const delay = ms => {\r\n  return new Promise(resolved => {\r\n    setTimeout(() => {\r\n      resolved(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const arr = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(arr);\r\n  });\r\n};\r\n\r\nconst logger = arr => console.table(arr);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","const makeTransaction = transaction => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve([transaction.id, delay]);\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst logSuccess = arr => {\r\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}